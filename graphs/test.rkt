#lang racket

(require "graphviz.rkt")
(require "comprehension.rkt")

#;(define (read-graph filename)
  (graph-parser
    (lambda ()
      (graph-lexer (open-input-file filename #:mode 'text)))))

#;(define divisibility50 (read-graph "div-graph"))

(define divisibility50 '("digraph" "divisibility50" ("1" "2" "3" "4" "5" "6" "7" "8" "9" "10" "11" "12" "13" "14" "15" "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30" "31" "32" "33" "34" "35" "36" "37" "38" "39" "40" "41" "42" "43" "44" "45" "46" "47" "48" "49") ((2 "2" "1") (3 "3" "1") (2 "4" "2") (5 "5" "1") (2 "6" "3") (3 "6" "2") (7 "7" "1") (2 "8" "4") (3 "9" "3") (2 "10" "5") (5 "10" "2") (11 "11" "1") (2 "12" "6") (3 "12" "4") (13 "13" "1") (2 "14" "7") (7 "14" "2") (3 "15" "5") (5 "15" "3") (2 "16" "8") (17 "17" "1") (2 "18" "9") (3 "18" "6") (19 "19" "1") (2 "20" "10") (5 "20" "4") (3 "21" "7") (7 "21" "3") (2 "22" "11") (11 "22" "2") (23 "23" "1") (2 "24" "12") (3 "24" "8") (5 "25" "5") (2 "26" "13") (13 "26" "2") (3 "27" "9") (2 "28" "14") (7 "28" "4") (29 "29" "1") (2 "30" "15") (3 "30" "10") (5 "30" "6") (31 "31" "1") (2 "32" "16") (3 "33" "11") (11 "33" "3") (2 "34" "17") (17 "34" "2") (5 "35" "7") (7 "35" "5") (2 "36" "18") (3 "36" "12") (37 "37" "1") (2 "38" "19") (19 "38" "2") (3 "39" "13") (13 "39" "3") (2 "40" "20") (5 "40" "8") (41 "41" "1") (2 "42" "21") (3 "42" "14") (7 "42" "6") (43 "43" "1") (2 "44" "22") (11 "44" "4") (3 "45" "15") (5 "45" "9") (2 "46" "23") (23 "46" "2") (47 "47" "1") (2 "48" "24") (3 "48" "16") (7 "49" "7"))))

(graphviz divisibility50)

(graphviz
  (subgraph divisibility50 (lambda (w f t) (< (string->number f) 5))))
 
(match-graph divisibility50
  [(-> w "20" to) (string->number to)]
  [(-> w "10" to) (list w (string->number to))])

(match-graph divisibility50
  [(-> w from to) #:when (equal? from "20") (string->number to)])
